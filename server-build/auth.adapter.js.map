{
  "version": 3,
  "sources": ["../server/auth.adapter.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-unused-vars */\n// TODO: Remove eslint disable directive after completing implementation.\nimport type {\n  Adapter,\n  AdapterAccount,\n  AdapterSession,\n  AdapterUser,\n  VerificationToken,\n} from \"next-auth/adapters\";\nimport createDebug from \"debug\";\n\nconst debug = createDebug(\"AuthAdapter\");\n\n// TODO: Implement this adapter interface for your own database and session management.\n\nexport function AuthAdapter(): Adapter {\n  return {\n    async createUser(user: Omit<AdapterUser, \"id\">): Promise<AdapterUser> {\n      debug(\"createUser\", user);\n      throw new Error(\"createUser not implemented\");\n    },\n    async getUser(id: string): Promise<AdapterUser | null> {\n      debug(\"getUser\", id);\n      throw new Error(\"getUser not implemented\");\n    },\n    async getUserByEmail(email: string): Promise<AdapterUser | null> {\n      debug(\"getUserByEmail\", email);\n      throw new Error(\"getUserByEmail not implemented\");\n    },\n    async getUserByAccount({\n      providerAccountId,\n      provider,\n    }: {\n      providerAccountId: string;\n      provider: string;\n    }): Promise<AdapterUser | null> {\n      debug(\"getUserByAccount\", provider, providerAccountId);\n      throw new Error(\"getUserByAccount not implemented\");\n    },\n    async updateUser(\n      user: Partial<AdapterUser> & Pick<AdapterUser, \"id\">\n    ): Promise<AdapterUser> {\n      debug(\"updateUser\", user);\n      throw new Error(\"updateUser not implemented\");\n    },\n    async deleteUser(userId: string) {\n      debug(\"deleteUser\", userId);\n      throw new Error(\"deleteUser not implemented\");\n    },\n    async linkAccount(account: AdapterAccount) {\n      debug(\"linkAccount\", account);\n      throw new Error(\"linkAccount not implemented\");\n    },\n    async unlinkAccount({\n      providerAccountId,\n      provider,\n    }: {\n      providerAccountId: string;\n      provider: string;\n    }) {\n      debug(\"unlinkAccount\", provider, providerAccountId);\n      throw new Error(\"unlinkAccount not implemented\");\n    },\n    async createSession(session: {\n      sessionToken: string;\n      userId: string;\n      expires: Date;\n    }): Promise<AdapterSession> {\n      debug(\"createSession\", session);\n      throw new Error(\"createSession not implemented\");\n    },\n    async getSessionAndUser(\n      sessionToken: string\n    ): Promise<{ session: AdapterSession; user: AdapterUser } | null> {\n      debug(\"getSessionAndUser\", sessionToken);\n      throw new Error(\"getSessionAndUser not implemented\");\n    },\n    async updateSession({\n      sessionToken,\n    }: {\n      sessionToken: string;\n    }): Promise<AdapterSession | null | undefined> {\n      debug(\"updateSession\", sessionToken);\n      throw new Error(\"updateSession not implemented\");\n    },\n    async deleteSession(sessionToken: string) {\n      debug(\"deleteSession\");\n      throw new Error(\"deleteSession not implemented\");\n    },\n    async createVerificationToken({\n      identifier,\n      expires,\n      token,\n    }: {\n      identifier: string;\n      expires: Date;\n      token: string;\n    }): Promise<VerificationToken | null | undefined> {\n      debug(\"createVerificationToken\", identifier, expires, token);\n      throw new Error(\"createVerificationToken not implemented\");\n    },\n    async useVerificationToken({\n      identifier,\n      token,\n    }: {\n      identifier: string;\n      token: string;\n    }): Promise<VerificationToken | null> {\n      debug(\"useVerificationToken\", identifier, token);\n      throw new Error(\"useVerificationToken not implemented\");\n    },\n  };\n}\n"],
  "mappings": "AASA,OAAO,iBAAiB;AAExB,MAAM,QAAQ,YAAY,aAAa;AAIhC,SAAS,cAAuB;AACrC,SAAO;AAAA,IACL,MAAM,WAAW,MAAqD;AACpE,YAAM,cAAc,IAAI;AACxB,YAAM,IAAI,MAAM,4BAA4B;AAAA,IAC9C;AAAA,IACA,MAAM,QAAQ,IAAyC;AACrD,YAAM,WAAW,EAAE;AACnB,YAAM,IAAI,MAAM,yBAAyB;AAAA,IAC3C;AAAA,IACA,MAAM,eAAe,OAA4C;AAC/D,YAAM,kBAAkB,KAAK;AAC7B,YAAM,IAAI,MAAM,gCAAgC;AAAA,IAClD;AAAA,IACA,MAAM,iBAAiB;AAAA,MACrB;AAAA,MACA;AAAA,IACF,GAGgC;AAC9B,YAAM,oBAAoB,UAAU,iBAAiB;AACrD,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACpD;AAAA,IACA,MAAM,WACJ,MACsB;AACtB,YAAM,cAAc,IAAI;AACxB,YAAM,IAAI,MAAM,4BAA4B;AAAA,IAC9C;AAAA,IACA,MAAM,WAAW,QAAgB;AAC/B,YAAM,cAAc,MAAM;AAC1B,YAAM,IAAI,MAAM,4BAA4B;AAAA,IAC9C;AAAA,IACA,MAAM,YAAY,SAAyB;AACzC,YAAM,eAAe,OAAO;AAC5B,YAAM,IAAI,MAAM,6BAA6B;AAAA,IAC/C;AAAA,IACA,MAAM,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,IACF,GAGG;AACD,YAAM,iBAAiB,UAAU,iBAAiB;AAClD,YAAM,IAAI,MAAM,+BAA+B;AAAA,IACjD;AAAA,IACA,MAAM,cAAc,SAIQ;AAC1B,YAAM,iBAAiB,OAAO;AAC9B,YAAM,IAAI,MAAM,+BAA+B;AAAA,IACjD;AAAA,IACA,MAAM,kBACJ,cACgE;AAChE,YAAM,qBAAqB,YAAY;AACvC,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACrD;AAAA,IACA,MAAM,cAAc;AAAA,MAClB;AAAA,IACF,GAE+C;AAC7C,YAAM,iBAAiB,YAAY;AACnC,YAAM,IAAI,MAAM,+BAA+B;AAAA,IACjD;AAAA,IACA,MAAM,cAAc,cAAsB;AACxC,YAAM,eAAe;AACrB,YAAM,IAAI,MAAM,+BAA+B;AAAA,IACjD;AAAA,IACA,MAAM,wBAAwB;AAAA,MAC5B;AAAA,MACA;AAAA,MACA;AAAA,IACF,GAIkD;AAChD,YAAM,2BAA2B,YAAY,SAAS,KAAK;AAC3D,YAAM,IAAI,MAAM,yCAAyC;AAAA,IAC3D;AAAA,IACA,MAAM,qBAAqB;AAAA,MACzB;AAAA,MACA;AAAA,IACF,GAGsC;AACpC,YAAM,wBAAwB,YAAY,KAAK;AAC/C,YAAM,IAAI,MAAM,sCAAsC;AAAA,IACxD;AAAA,EACF;AACF;",
  "names": []
}
